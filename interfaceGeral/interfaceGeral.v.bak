module interfaceGeral(
	input clk_50,
	input bt_reset,
	input bt,
	input [13:0] in,
	input HardReset,
	output LCD_EN,
	output LCD_RW,
	output LCD_RS,
	output [7:0]LCD_DATA,
	output LCD_ON,
	output LCD_BLON,
	output[27:0] display,
	output[17:0] outLRED,				// Led output
	output[8:0] outLGREEN,
	//output [1:0] auxout,
	// output outawait,
	// output outupdate,
	output [27:0]pc_disp,
	//output outclk
	
	// Comunicação Digital
	input Rx,
	input nresetTopIO,
	input resetMouse,
	input [1:0] IODebugIn,
	output hSync,
	output vSync,
	output clk25,
	output [7:0] red,
	output [7:0] green, 
	output [7:0] blue,
	output [10:0]IODebugOut
);
	
	parameter [31:0]JUMP_BACK = 32'b010110_10110_10111_0000000000000000; // TODO: Ver o numero dos registradores
	// Clock da CPU
	wire cpu_clk;
	wire clk_divided;
	//wire io_clk;

	// Instruction after mux
	wire [31:0] instr;
	
	// MD
	wire [31:0] md_am;
	
	// MI - Sign Extend out
	wire [31:0] id;
	wire[15:0] imm16;
	wire[31:0] imm32;
	
	// BR IN
	wire[31:0] dr1_;
	
	// BR OUT
	wire[31:0] dr1, dr2;
	wire cfl;
	
	// ULAS IN
	wire[31:0] op1_aux;
	wire[31:0] op1;
	wire[31:0] op2;

	// ULAS OUT
	wire[31:0] r1;
	wire uf;
	
	// MEM OUT
	wire[31:0] dm;
	
	// HD OUT
	wire[7:0] sdd;
	
	// MUX inop
	wire[31:0] du;
	
	// MUX OUT
	wire detour;
	
	// UC
	wire haltOp;
	wire cflw;
	wire basew;
	wire ctime;
	wire stime;
	wire jumpR;
	wire insW;
	wire[1:0] regw;
	wire immop;
	wire dataop;
	wire dataopp;
	wire hdst;
	wire datast;
	wire lcdOp;
	wire[4:0] aluop;
	wire memw;
	wire cond;
	wire jump;
	wire branch;
	wire jturn;
	wire bturn;
	wire[31:0] pcbranch;
	wire sleep;
	wire lmop;
	wire EWfb;
	
	//PC
	wire[31:0] pc_;
	wire[31:0] pc;
	wire[31:0] pcone;	
	
	// Deviation
	wire [31:0] jump_addr;
	
	// Timer
	wire update;
	
	// Deadline
	wire timeout;
	wire interrupt;
	
	// IO
	wire inop;
	wire outop;
	wire await;
	wire awaitLCD;
	wire[31:0] datauser;
	
	wire[31:0] dm_;
	
	wire [15:0]lcdmx_boot;
	wire [15:0]lcdmx_man;
	wire [15:0]lcdmx_out;
	
	wire lcd_boot_EN;
	wire lcd_boot_RW;
	wire lcd_boot_RS;
	wire [7:0]lcd_boot_DATA;
	wire lcd_boot_ON;
	
	wire lcd_man_EN;
	wire lcd_man_RW;
	wire lcd_man_RS;
	wire [7:0]lcd_man_DATA;
	wire lcd_man_ON;
	
	wire [15:0]instr_lcd;
	
	// Comunicação Digital TOP IO
	wire [9:0]mouseX;
	wire [9:0]mouseY;
	topIO(
		.clk50(clk_50),
		.Rx(Rx),
		.nreset(nresetTopIO),
		.resetPos(resetMouse),
		.outAlt(IODebugIn),
		.EWfb(EWfb),
		.dt(dr2[9:0]),
		.frameX(dr1[19:10]),
		.frameY(dr1[9:0]),
		
		.mX(mouseX),
		.mY(mouseY),
		.hSync(hSync),
		.vSync(vSync),
		.clk25(clk25),
		.red(red),
		.green(green),
		.blue(blue),
		.outGeneral(IODebugOut),
		.video_on()
	);
	
	//	Timer
	divisor dv(.CLK_50(clk_50), .key(bt_reset), .divided(clk_divided));

	timer tclk(.in_clk(clk_divided), .update(update), .out_clk(cpu_clk));
	
	// IO
	IO io(.inop(inop), .outop(outop), .bt(~bt), .in(in), .dm(dm), .du(du), .display(display), .await(await), .clk(clk_divided), .clk_state(cpu_clk));
	
	assign update = ((~(sleep | await | awaitLCD)) | HardReset);
	
	mux2b32 mxinop(.in0(dr2), .in1(du), .c0(inop), .out(dm_));	
	
	// Mux JBTurn
	mux4b32 mxjbturn(.in3(32'd0), .in2(pcbranch), .in1(jump_addr), .in0(pcone), .c1(bturn), .c0(jturn), .out(pc_));
	
	// PC
	PC pc0(
		.PC_(pc_),
		.PC(pc),
		.clk(cpu_clk)
	);
	
	// Adder pc
	adder pcadder(
		.in1(1),
		.in2(pc),
		.out(pcone)
	);
	
	// Memoria de Instrução
	MI mi(
		.clk(cpu_clk),
		
		.I(pc),
		.insW(insW),
		
		.DI_(dr2),
		.AI(r1),
		
		.ID(id)
	);
	
	// Unidade de Controle
	UC uc0(
		.opcode(instr[31:26]),	
		.funct(instr[4:0]),
		
		.EWfb(EWfb),
		.haltOp(haltOp),
		.lmop(lmop),
		.cflw(cflw),
		.basew(basew),
		.ctime(ctime),
		.stime(stime),
		.jumpR(jumpR),
		.insW(insW),
		.lcdOp(lcdOp),
		.regw(regw), 
		.immop(immop), 
		.dataop(dataop),
		.dataopp(dataopp),
		.datast(datast),
		.hdst(hdst),
		.aluop(aluop), 
		.memw(memw), 
		.cond(cond), 
		.jump(jump), 
		.branch(branch),
		.sleep(sleep),
		.inop(inop),
		.outop(outop)
	);
	
	// Mux condicional
	mux2b1 mxcon(.in0(1'b1), .in1(cfl), .c0(cond), .out(detour));
	
	// AND Condicional - JUPM
	assign jturn = ((detour & jump) | HardReset);
	
	// AND Condicional - BRANCH
	assign bturn = ((detour & branch) | HardReset);
	
	

	// Banco de Registradores
	BR br0(
		.DR1_(dr1_),
		.DJ(pcone), 
		.RA1(instr[25:21]), 
		.RA2(instr[20:16]), 
		.EW(regw), 
		.DF(uf),
		.DR1(dr1), 
		.DR2(dr2), 
		.CFL(cfl), 
		.clk(cpu_clk)
	);
	
	mux2b32 mxcflw(.in0(dr1), .in1(cfl), .c0(cflw),.out(op1_aux));
	
	// Mux escolha do imediato dado o formato de instrução
	mux2b16 mximmop(.in0(instr[15:0]), .in1(instr[20:5]), .c(immop), .out(imm16));
	
	// Extensor 16->32
	signExtend signextend0(.in(imm16), .out(imm32));
	
	// Adder branch
	adder addbranch(.in1(pcone), .in2(imm32), .out(pcbranch));
	
	// Mux operando 1 da ULA
	mux2b32 mxdataopp(.in0(op1_aux), .in1(imm32), .c0(dataopp),.out(op1));
	
	// Mux operando 2 da ULA
	mux2b32 mxdataop(.in0(imm32), .in1(dr2), .c0(dataop),.out(op2));
	
	mux2b32 mxjumpr(.in0(dr1), .in1(dr2), .c0(jumpR), .out(jump_addr));
	
	mux2b32 mxtimeout(.in0(id), .in1(JUMP_BACK), .c0(interrupt), .out(instr));
	
	deadline dl(.cpu_clk(cpu_clk), .interrupt(interrupt), .start_time(stime), .toCount(ctime), .timeout(timeout));
	
	interruption intert(.cpu_clk(cpu_clk), .interrupt_(timeout | haltOp), .interrupt(interrupt));

	
	// ULA
	ULAS ulas0( 
		.op1(op1), 
		.op2(op2), 
		.smt(instr[15:11]), 
		.aluop(aluop), 
		.r1(r1), 
		.UF(uf)
	);
	
	basis bs(
	.cpu_clk(cpu_clk),
	.basew(basew),
	.dual(r1),
	
	.dm(md_am)
	);
	
	// Memória de Dados
	MD md0(
		.AM(md_am),
		.DM_(dm_), 
		.EW(memw), 
		.DM(dm), 
		.clk(cpu_clk)
	);
	
	SD sd0(
		.AM(r1),
		.BYTE(3'b000),
		.DM(sdd)
	);
	
	
	// Mux de escrita nos regs
//	mux2b32 mxdatast(.in0(dm), .in1(r1), .c0(datast), .out(dr1_));
	mux4b32 mxhddatast(.in0(dm), .in1(r1), .in2({12'd0, mouseX, mouseY}), .in3(pcone), .c0(datast), .c1(hdst), .out(dr1_));

	// PC display
	bin2display b2dPC(.addr(pc[13:0]), .clk(cpu_clk), .data(pc_disp));
	
	lcdstart lcdBoot(
		.clk(clk_divided),
		.LCD_RS(lcd_boot_RS),
		.LCD_RW(lcd_boot_RW),
		.LCD_EN(lcd_boot_EN),
		.LCD_DATA(lcd_boot_DATA),
		.LCD_ON(lcd_boot_ON)
	);
	
	mux2b16 mxlcd1(.in0({8'b00000010, dr1[7:0]}), .in1(instr[15:0]), .c(lmop), .out(instr_lcd));
	
	lcd lcd0(
		.clk(clk_divided),
		.cpu_clk(cpu_clk),
		.DL(instr_lcd[9:0]),
		.lcdOp(lcdOp),
		.awaitLCD(awaitLCD),
		.LCD_ON(lcd_man_ON),
		.LCD_RS(lcd_man_RS),
		.LCD_RW(lcd_man_RW),
		.LCD_EN(lcd_man_EN),
		.LCD_DATA(lcd_man_DATA)
	);
	
	
	assign lcdmx_boot[15:11] = 5'b00000;
	assign lcdmx_boot[10] = lcd_boot_EN;
	assign lcdmx_boot[9] = lcd_boot_RS;
	assign lcdmx_boot[8] = lcd_boot_RW;
	assign lcdmx_boot[7:0] = lcd_boot_DATA;
	
	assign lcdmx_man[15:11] = 5'b00000;
	assign lcdmx_man[10] = lcd_man_EN;
	assign lcdmx_man[9] = lcd_man_RS;
	assign lcdmx_man[8] = lcd_man_RW;
	assign lcdmx_man[7:0] = lcd_man_DATA;	
	
	mux2b16 mxlcd0(.in0(lcdmx_boot), .in1(lcdmx_man), .c(lcdOp), .out(lcdmx_out));

	
	assign LCD_EN = lcdmx_out[10];
	assign LCD_RS = lcdmx_out[9];
	assign LCD_RW = lcdmx_out[8];
	assign LCD_DATA = lcdmx_out[7:0];
	assign LCD_ON = 1'b1;
	assign LCD_BLON = 1'b1;
	
	/*
	assign outLGREEN[1] = cpu_clk;
	assign outLGREEN[2] = update;
	assign outLGREEN[8] = await;
	*/	
	
	//assign outLRED[13:0] = in;	// Switches to led
	
	assign outLGREEN[7:0] = dm[7:0];
	//assign outLRED = dm[25:8];
	assign outLRED = dr1[17:0];

	// assign auxout[1:0] = md_am[15:14];
	// assign outsw[13:0] = md_am[13:0];
	// assign auxout[1:0] = instr[31:30];
	// assign outsw[13:8] = instr[29:24]; 
	// assign outsw[7:0] = instr[7:0];
endmodule
